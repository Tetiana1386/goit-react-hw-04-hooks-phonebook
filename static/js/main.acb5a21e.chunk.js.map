{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","Container","children","className","styles","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","resetForm","Form","preventDefault","Label","Input","type","pattern","title","required","onChange","placeholder","Button","ContactListItem","id","onDelete","Item","Text","Span","onClick","ContactList","contacts","length","List","map","contact","key","Filter","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","window","setItem","stringify","uuidv4","find","toLowerCase","alert","trim","test","prevContacts","lenght","normalizedFilter","includes","getVisibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acb5a21e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__Vd_-O\",\"Label\":\"ContactForm_Label___hNWO\",\"Input\":\"ContactForm_Input__HKadG\",\"Button\":\"ContactForm_Button__3_CQf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__20gyh\",\"Item\":\"ContactList_Item__3bY-S\",\"Text\":\"ContactList_Text__QTMR-\",\"Span\":\"ContactList_Span__2irRB\",\"Button\":\"ContactList_Button__otII1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__3FoRN\",\"Input\":\"Filter_Input__20k7U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3tQ9A\"};","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={styles.Container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.Form} onSubmit={handleSubmit}>\n      <label className={styles.Label}>\n        Name\n        <input\n          className={styles.Input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Ivan Ivanov\"\n        />\n      </label>\n      <label className={styles.Label}>\n        Number\n        <input\n          className={styles.Input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          value={number}\n          placeholder=\"111-11-11\"\n        />\n      </label>\n      <button className={styles.Button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number, onDelete }) => {\n  return (\n    <li className={styles.Item}>\n      <p className={styles.Text}>\n        {name}: <span className={styles.Span}>{number}</span>\n      </p>\n      <button\n        className={styles.Button}\n        type=\"button\"\n        onClick={() => onDelete(id)}\n      ></button>\n    </li>\n  );\n};\n\nconst ContactList = ({ contacts, onDelete }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={styles.List}>\n      {contacts.map(contact => (\n        <ContactListItem {...contact} onDelete={onDelete} key={contact.id} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.Label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        className={styles.Input}\n        value={value}\n        onChange={onChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  });\n\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleAddContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts.`);\n    } else if (!name.trim() || !number.trim()) {\n      alert(\"Enter the contact's name and number phone!\");\n    } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n      alert('Enter the correct number phone!');\n    } else {\n      setContacts(prevContacts => [...prevContacts, contact]);\n    }\n  };\n\n  const handleDeleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleAddContact} />\n      <h2>Contacts</h2>\n      {contacts.lenght > 1 && <Filter value={filter} onChange={changeFilter} />}\n      {contacts.length > 0 ? (\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDelete={handleDeleteContact}\n        />\n      ) : (\n        <p>Your phonebook is empty. Please add contact.</p>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}